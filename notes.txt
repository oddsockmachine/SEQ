8x32 grid
4 encoders
4 screens? Maybe 1 good screen is better


        neotrellis > listener
        - fire event on push
        - set push time
        - fire click event on release, if short pushtime
        - fire hold/right-click event if long pushtime (on release?)

        Midi out
        - When note fires, keep track of which are still playing
        - Keep track of intended duration
        - count duration according to midi click
        - at each click, decide which notes need to be turned off



Note grid
- Notes should include duration, velocity, mod-cc
- Click to add note
- click again to select, for duration, velocity, etc
- hold/right-clight to delete? Or vice-versa?
- NoteGrid just shows whether there's a note, velocity, duration
- NG also shows LED status based on duration, velocity
- velocity 0-127 maps to brightness 64-127
- tail/sustain has brightness 0-63
- Instrument has a note converter to handle pitch according to scale
- Instrument handles clicks, long-clicks, etc
- Also Channel per Instrument
- Instrument handles color scheme, NG just returns brightness



How to mock hardware for local testing?

Show all 8 tracks on front screen
each instrument/grid needs method to show itself on one line - maybe brightness or color for note value

synchronise beat number across instruments?
Same beat across all?

buses/mailboxes are named according to receiver

encoders + oleds
1 Global menu?
  click to ??

2 select instrument
  click to start/stop

3 duration
  click to reset?

4 veloctiy
  click to reset?


what happens if I increase duration, then add a new note before old note ends?
Does midiout clock need to be 4x faster? tick and beat/

color schemes!
grid passed from notegrid/instrument has tuples of (R,G,B,type), where type = note|blank|selected|beat|tail


mypy type hints?!